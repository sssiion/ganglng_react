{"ast":null,"code":"import React, { useContext, useMemo, useImperativeHandle, useLayoutEffect } from 'react';\nimport { useMap } from '../hooks/useMap.js';\nimport { DrawingManagerContext } from './DrawingManager.js';\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = /*#__PURE__*/React.forwardRef(function Toolbox(_ref, ref) {\n  let {\n    position: _position = kakao.maps.ControlPosition.TOP\n  } = _ref;\n  const position = typeof _position === \"string\" ? kakao.maps.ControlPosition[_position] : _position;\n  const map = useMap(\"Toolbox\");\n  const drawingmanager = useContext(DrawingManagerContext);\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\");\n  }\n  const toolbox = useMemo(() => new kakao.maps.drawing.Toolbox({\n    drawingManager: drawingmanager\n  }), [drawingmanager]);\n  useImperativeHandle(ref, () => toolbox, [toolbox]);\n  useLayoutEffect(() => {\n    const element = toolbox.getElement();\n    map.addControl(element, position);\n    return () => {\n      map.removeControl(element);\n    };\n  }, [map, toolbox, position]);\n  return null;\n});\nexport { Toolbox };","map":{"version":3,"names":["React","useContext","useMemo","useImperativeHandle","useLayoutEffect","useMap","DrawingManagerContext","Toolbox","forwardRef","_ref","ref","position","_position","kakao","maps","ControlPosition","TOP","map","drawingmanager","Error","toolbox","drawing","drawingManager","element","getElement","addControl","removeControl"],"sources":["C:/Users/USER/my-app/node_modules/react-kakao-maps-sdk/esm/components/Toolbox.js"],"sourcesContent":["import React, { useContext, useMemo, useImperativeHandle, useLayoutEffect } from 'react';\nimport { useMap } from '../hooks/useMap.js';\nimport { DrawingManagerContext } from './DrawingManager.js';\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = /*#__PURE__*/React.forwardRef(function Toolbox(_ref, ref) {\n  let {\n    position: _position = kakao.maps.ControlPosition.TOP\n  } = _ref;\n  const position = typeof _position === \"string\" ? kakao.maps.ControlPosition[_position] : _position;\n  const map = useMap(\"Toolbox\");\n  const drawingmanager = useContext(DrawingManagerContext);\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\");\n  }\n  const toolbox = useMemo(() => new kakao.maps.drawing.Toolbox({\n    drawingManager: drawingmanager\n  }), [drawingmanager]);\n  useImperativeHandle(ref, () => toolbox, [toolbox]);\n  useLayoutEffect(() => {\n    const element = toolbox.getElement();\n    map.addControl(element, position);\n    return () => {\n      map.removeControl(element);\n    };\n  }, [map, toolbox, position]);\n  return null;\n});\n\nexport { Toolbox };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,eAAe,QAAQ,OAAO;AACxF,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,qBAAqB,QAAQ,qBAAqB;;AAE3D;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,aAAaP,KAAK,CAACQ,UAAU,CAAC,SAASD,OAAOA,CAACE,IAAI,EAAEC,GAAG,EAAE;EACxE,IAAI;IACFC,QAAQ,EAAEC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACC,eAAe,CAACC;EACnD,CAAC,GAAGP,IAAI;EACR,MAAME,QAAQ,GAAG,OAAOC,SAAS,KAAK,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACC,eAAe,CAACH,SAAS,CAAC,GAAGA,SAAS;EAClG,MAAMK,GAAG,GAAGZ,MAAM,CAAC,SAAS,CAAC;EAC7B,MAAMa,cAAc,GAAGjB,UAAU,CAACK,qBAAqB,CAAC;EACxD,IAAI,CAACY,cAAc,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,MAAMC,OAAO,GAAGlB,OAAO,CAAC,MAAM,IAAIW,KAAK,CAACC,IAAI,CAACO,OAAO,CAACd,OAAO,CAAC;IAC3De,cAAc,EAAEJ;EAClB,CAAC,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EACrBf,mBAAmB,CAACO,GAAG,EAAE,MAAMU,OAAO,EAAE,CAACA,OAAO,CAAC,CAAC;EAClDhB,eAAe,CAAC,MAAM;IACpB,MAAMmB,OAAO,GAAGH,OAAO,CAACI,UAAU,CAAC,CAAC;IACpCP,GAAG,CAACQ,UAAU,CAACF,OAAO,EAAEZ,QAAQ,CAAC;IACjC,OAAO,MAAM;MACXM,GAAG,CAACS,aAAa,CAACH,OAAO,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAACN,GAAG,EAAEG,OAAO,EAAET,QAAQ,CAAC,CAAC;EAC5B,OAAO,IAAI;AACb,CAAC,CAAC;AAEF,SAASJ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}