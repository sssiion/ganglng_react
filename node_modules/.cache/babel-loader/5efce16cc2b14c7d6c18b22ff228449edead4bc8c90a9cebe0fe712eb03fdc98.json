{"ast":null,"code":"import React, { useState, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../hooks/useIsomorphicLayoutEffect.js';\nimport { useKakaoEvent } from '../hooks/useKakaoEvent.js';\nimport { Loader } from '../util/kakaoMapApiLoader.js';\nimport { SIGNATURE } from '../util/constants.js';\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nconst KakaoRoadviewContext = /*#__PURE__*/React.createContext(undefined);\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview = /*#__PURE__*/React.forwardRef(function Roadview(_ref, ref) {\n  let {\n    id,\n    as,\n    children,\n    position,\n    pan,\n    panoId,\n    panoX,\n    panoY,\n    tilt,\n    zoom,\n    onCreate,\n    onInit,\n    onPanoidChange,\n    onPositionChanged,\n    onViewpointChange,\n    onErrorGetNearestPanoId,\n    ...props\n  } = _ref;\n  const Container = as || \"div\";\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [roadview, setRoadview] = useState();\n  const container = useRef(null);\n  useIsomorphicLayoutEffect(() => {\n    const callback = Loader.addLoadEventLisnter(err => setIsLoaded(!err));\n    return () => {\n      Loader.removeLoadEventLisnter(callback);\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (!isLoaded) return;\n    const RoadviewContainer = container.current;\n    if (!RoadviewContainer) return;\n    const kakaoRoadview = new kakao.maps.Roadview(RoadviewContainer, {\n      pan: pan,\n      panoId: panoId,\n      panoX: panoX,\n      panoY: panoY,\n      tilt: tilt,\n      zoom: zoom\n    });\n    setRoadview(kakaoRoadview);\n    return () => {\n      RoadviewContainer.innerHTML = \"\";\n    };\n  }, [isLoaded, panoX, panoY, zoom]);\n  useImperativeHandle(ref, () => roadview, [roadview]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || !onCreate) return;\n    onCreate(roadview);\n  }, [roadview, onCreate]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || panoId || roadview.getPosition().getLat() === position.lat && roadview.getPosition().getLng() === position.lng) return;\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng);\n    new kakao.maps.RoadviewClient().getNearestPanoId(newPostion, position.radius, panoId => {\n      if (panoId === null && onErrorGetNearestPanoId) {\n        onErrorGetNearestPanoId(roadview);\n      } else {\n        roadview.setPanoId(panoId, newPostion);\n      }\n    });\n  }, [roadview, panoId, position.lat, position.lng, position.radius, onErrorGetNearestPanoId]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || !panoId || panoId === roadview.getPanoId() || roadview.getPosition().getLat() === position.lat && roadview.getPosition().getLng() === position.lng) return;\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng);\n    roadview.setPanoId(panoId, newPostion);\n  }, [roadview, panoId, position.lat, position.lng]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview) return;\n    const prevViewpoint = roadview.getViewpoint();\n    if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return;\n    if (pan) prevViewpoint.pan = pan;\n    if (tilt) prevViewpoint.tilt = tilt;\n    roadview.setViewpoint(prevViewpoint);\n  }, [roadview, pan, tilt]);\n  useKakaoEvent(roadview, \"init\", target => {\n    setIsLoading(false);\n    if (onInit) onInit(target);\n  });\n  useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange);\n  useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange);\n  useKakaoEvent(roadview, \"position_changed\", onPositionChanged);\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(Container, {\n      ref: container,\n      id: id || `${SIGNATURE}_Roadview`,\n      ...props\n    }), roadview && !isLoading && /*#__PURE__*/jsx(KakaoRoadviewContext.Provider, {\n      value: roadview,\n      children: children\n    })]\n  });\n});\nexport { KakaoRoadviewContext, Roadview };","map":{"version":3,"names":["React","useState","useRef","useImperativeHandle","useIsomorphicLayoutEffect","useKakaoEvent","Loader","SIGNATURE","jsxs","Fragment","jsx","KakaoRoadviewContext","createContext","undefined","Roadview","forwardRef","_ref","ref","id","as","children","position","pan","panoId","panoX","panoY","tilt","zoom","onCreate","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","props","Container","isLoaded","setIsLoaded","isLoading","setIsLoading","roadview","setRoadview","container","callback","addLoadEventLisnter","err","removeLoadEventLisnter","RoadviewContainer","current","kakaoRoadview","kakao","maps","innerHTML","getPosition","getLat","lat","getLng","lng","newPostion","LatLng","RoadviewClient","getNearestPanoId","radius","setPanoId","getPanoId","prevViewpoint","getViewpoint","setViewpoint","target","Provider","value"],"sources":["C:/Users/USER/my-app/node_modules/react-kakao-maps-sdk/esm/components/Roadview.js"],"sourcesContent":["import React, { useState, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../hooks/useIsomorphicLayoutEffect.js';\nimport { useKakaoEvent } from '../hooks/useKakaoEvent.js';\nimport { Loader } from '../util/kakaoMapApiLoader.js';\nimport { SIGNATURE } from '../util/constants.js';\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\n\nconst KakaoRoadviewContext = /*#__PURE__*/React.createContext(undefined);\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview = /*#__PURE__*/React.forwardRef(function Roadview(_ref, ref) {\n  let {\n    id,\n    as,\n    children,\n    position,\n    pan,\n    panoId,\n    panoX,\n    panoY,\n    tilt,\n    zoom,\n    onCreate,\n    onInit,\n    onPanoidChange,\n    onPositionChanged,\n    onViewpointChange,\n    onErrorGetNearestPanoId,\n    ...props\n  } = _ref;\n  const Container = as || \"div\";\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [roadview, setRoadview] = useState();\n  const container = useRef(null);\n  useIsomorphicLayoutEffect(() => {\n    const callback = Loader.addLoadEventLisnter(err => setIsLoaded(!err));\n    return () => {\n      Loader.removeLoadEventLisnter(callback);\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (!isLoaded) return;\n    const RoadviewContainer = container.current;\n    if (!RoadviewContainer) return;\n    const kakaoRoadview = new kakao.maps.Roadview(RoadviewContainer, {\n      pan: pan,\n      panoId: panoId,\n      panoX: panoX,\n      panoY: panoY,\n      tilt: tilt,\n      zoom: zoom\n    });\n    setRoadview(kakaoRoadview);\n    return () => {\n      RoadviewContainer.innerHTML = \"\";\n    };\n  }, [isLoaded, panoX, panoY, zoom]);\n  useImperativeHandle(ref, () => roadview, [roadview]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || !onCreate) return;\n    onCreate(roadview);\n  }, [roadview, onCreate]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || panoId || roadview.getPosition().getLat() === position.lat && roadview.getPosition().getLng() === position.lng) return;\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng);\n    new kakao.maps.RoadviewClient().getNearestPanoId(newPostion, position.radius, panoId => {\n      if (panoId === null && onErrorGetNearestPanoId) {\n        onErrorGetNearestPanoId(roadview);\n      } else {\n        roadview.setPanoId(panoId, newPostion);\n      }\n    });\n  }, [roadview, panoId, position.lat, position.lng, position.radius, onErrorGetNearestPanoId]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview || !panoId || panoId === roadview.getPanoId() || roadview.getPosition().getLat() === position.lat && roadview.getPosition().getLng() === position.lng) return;\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng);\n    roadview.setPanoId(panoId, newPostion);\n  }, [roadview, panoId, position.lat, position.lng]);\n  useIsomorphicLayoutEffect(() => {\n    if (!roadview) return;\n    const prevViewpoint = roadview.getViewpoint();\n    if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return;\n    if (pan) prevViewpoint.pan = pan;\n    if (tilt) prevViewpoint.tilt = tilt;\n    roadview.setViewpoint(prevViewpoint);\n  }, [roadview, pan, tilt]);\n  useKakaoEvent(roadview, \"init\", target => {\n    setIsLoading(false);\n    if (onInit) onInit(target);\n  });\n  useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange);\n  useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange);\n  useKakaoEvent(roadview, \"position_changed\", onPositionChanged);\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(Container, {\n      ref: container,\n      id: id || `${SIGNATURE}_Roadview`,\n      ...props\n    }), roadview && !isLoading && /*#__PURE__*/jsx(KakaoRoadviewContext.Provider, {\n      value: roadview,\n      children: children\n    })]\n  });\n});\n\nexport { KakaoRoadviewContext, Roadview };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}