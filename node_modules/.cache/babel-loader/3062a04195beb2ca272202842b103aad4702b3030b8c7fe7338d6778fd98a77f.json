{"ast":null,"code":"import React, { useMemo, useImperativeHandle, useLayoutEffect } from 'react';\nimport { useMap } from '../hooks/useMap.js';\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = /*#__PURE__*/React.forwardRef(function AbstractOverlay(_ref, ref) {\n  let {\n    draw,\n    onAdd,\n    onRemove,\n    onCreate\n  } = _ref;\n  const map = useMap();\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw, onAdd, onRemove) {\n        super();\n        this.draw = draw;\n        this.onAdd = onAdd;\n        this.onRemove = onRemove;\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove);\n    return overlay;\n  }, [draw, onAdd, onRemove]);\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay]);\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map);\n    return () => {\n      reactAbstractOverlay.setMap(null);\n    };\n  }, [map, reactAbstractOverlay]);\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay);\n  }, [reactAbstractOverlay, onCreate]);\n  return null;\n});\nexport { AbstractOverlay };","map":{"version":3,"names":["React","useMemo","useImperativeHandle","useLayoutEffect","useMap","AbstractOverlay","forwardRef","_ref","ref","draw","onAdd","onRemove","onCreate","map","reactAbstractOverlay","ReactAbstractOveraly","kakao","maps","constructor","overlay","setMap"],"sources":["C:/Users/USER/my-app/node_modules/react-kakao-maps-sdk/esm/components/AbstractOverlay.js"],"sourcesContent":["import React, { useMemo, useImperativeHandle, useLayoutEffect } from 'react';\nimport { useMap } from '../hooks/useMap.js';\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = /*#__PURE__*/React.forwardRef(function AbstractOverlay(_ref, ref) {\n  let {\n    draw,\n    onAdd,\n    onRemove,\n    onCreate\n  } = _ref;\n  const map = useMap();\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw, onAdd, onRemove) {\n        super();\n        this.draw = draw;\n        this.onAdd = onAdd;\n        this.onRemove = onRemove;\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove);\n    return overlay;\n  }, [draw, onAdd, onRemove]);\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay]);\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map);\n    return () => {\n      reactAbstractOverlay.setMap(null);\n    };\n  }, [map, reactAbstractOverlay]);\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay);\n  }, [reactAbstractOverlay, onCreate]);\n  return null;\n});\n\nexport { AbstractOverlay };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,mBAAmB,EAAEC,eAAe,QAAQ,OAAO;AAC5E,SAASC,MAAM,QAAQ,oBAAoeAAe,GAAG,aAAaL,KAAK,CAACM,UAAU,CAAC,SAASD,eAAeA,CAACE,IAAI,EAAEC,GAAG,EAAE;EACxF,IAAI;IACFC,IAAI;IACJC,KAAK;IACLC,QAAQ;IACRC;EACF,CAAC,GAAGL,IAAI;EACR,MAAMM,GAAG,GAAGT,MAAM,CAAC,CAAC;EACpB,MAAMU,oBAAoB,GAAGb,OAAO,CAAC,MAAM;IACzC,MAAMc,oBAAoB,SAASC,KAAK,CAACC,IAAI,CAACZ,eAAe,CAAC;MAC5Da,WAAWA,CAACT,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;QACjC,KAAK,CAAC,CAAC;QACP,IAAI,CAACF,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;MAC1B;IACF;IACA,MAAMQ,OAAO,GAAG,IAAIJ,oBAAoB,CAACN,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IAC/D,OAAOQ,OAAO;EAChB,CAAC,EAAE,CAACV,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAC3BT,mBAAmB,CAACM,GAAG,EAAE,MAAMM,oBAAoB,EAAE,CAACA,oBAAoB,CAAC,CAAC;EAC5EX,eAAe,CAAC,MAAM;IACpBW,oBAAoB,CAACM,MAAM,CAACP,GAAG,CAAC;IAChC,OAAO,MAAM;MACXC,oBAAoB,CAACM,MAAM,CAAC,IAAI,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,CAACP,GAAG,EAAEC,oBAAoB,CAAC,CAAC;EAC/BX,eAAe,CAAC,MAAM;IACpB,IAAIS,QAAQ,EAAEA,QAAQ,CAACE,oBAAoB,CAAC;EAC9C,CAAC,EAAE,CAACA,oBAAoB,EAAEF,QAAQ,CAAC,CAAC;EACpC,OAAO,IAAI;AACb,CAAC,CAAC;AAEF,SAASP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}